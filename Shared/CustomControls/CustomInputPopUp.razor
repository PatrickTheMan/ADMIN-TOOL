@using B2S_MOP.Models;

<div class="@(ShowPopUp ? "d-block" : "d-none") h-100 w-100 position-absolute top-0 start-0" style="z-index: 9999;">
	<div class="overlay h-100 w-100 position-absolute top-0 start-0" style="background-color: var(--overlay-color); opacity: 75%;"></div>

	<div class="d-flex flex-column position-absolute top-50 start-50 translate-middle w-100 theme-foreground" style="max-width: 512px;">
		<div class="w-100" style="background-color: var(--add-color); height: 0.5rem;"></div>
		<div class="d-flex flex-column w-100 h-100 theme-border-bottom">
			<div class="d-flex w-100 h-100">
				<div class="d-flex justify-content-center align-items-center w-25" style="aspect-ratio: 1/1;">
					<i class="material-icons main-icon m-0" style="font-size: 3rem; color: var(--add-color);">
						add
					</i>
				</div>
				<div class="d-flex flex-column justify-content-center ps-0 pb-0 p-3 gap-2 h-100 w-100">
					<p class="fw-bold m-0">@(Title ?? "Add item")</p>
					<p class="m-0">@(Description ?? "Your input is required to continue, otherwise you can click cancel")</p>
				</div>
			</div>
			<div class="d-flex flex-column p-3 gap-3 w-100 h-100">
				@foreach (string label in InputLabels)
				{
					<input autocomplete="off" class="m-0 ps-1 w-100 theme-border" style="outline: none;" placeholder=@label @bind="@_inputs[InputLabels.IndexOf(label)]" @oninput="@((e) => { _inputs[InputLabels.IndexOf(label)] = (string?) e.Value; Console.WriteLine(_inputs[InputLabels.IndexOf(label)]); })" />
				}
			</div>
		</div>
		<div class="theme-background d-flex flex-column p-2 gap-2 w-100">
			<div class="d-flex justify-content-end gap-3">
				<button class="secondary-button" @onclick=@(() => OnAction(false))>CANCEL</button>
				<button class="primary-button" @onclick=@(() => OnAction(true)) disabled=@(!CanContinue())>CONFIRM</button>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter] public bool ShowPopUp { get; set; } = false;

	[Parameter] public string? Title { get; set; } = null;
	[Parameter] public string? Description { get; set; } = null;

	[Parameter] public List<string> InputLabels { get; set; } = new List<string>();
	private List<string?> _inputs = new List<string?>();

	[Parameter] public EventCallback<bool> OnActionCallback { get; set; }
	[Parameter] public EventCallback<List<KeyValuePair<string, string?>>> OnInputSentCallback { get; set; }

	/// <summary>
	/// Checks if the user can legally continue
	/// </summary>
	/// <returns> Whether the user can continue or not </returns>
	private bool CanContinue()
	{
		return !_inputs.Contains(string.Empty) && !_inputs.Contains(null);
	}

	/// <summary>
	/// This is the method invoking the callback when the user takes action
	/// </summary>
	/// <param name="input"> The input from the action it is placed on </param>
	public void OnAction(bool input)
	{
		List<KeyValuePair<string, string?>> pairs = new();

		ShowPopUp = false;
		OnActionCallback.InvokeAsync(input);
		for (int i = 0; i < InputLabels.Count; i++)
		{
			pairs.Add(new(InputLabels[i], _inputs[i]));
			_inputs[i] = string.Empty; // Reset
		}
		if (input) OnInputSentCallback.InvokeAsync(pairs);
		ClearInputs();
		StateHasChanged();
	}

	private void ClearInputs()
	{
		for (int i = 0; i < _inputs.Count; i++)
		{
			_inputs[i] = string.Empty;
		}
	}

	/// <summary>
	/// This is the method to show the pop-up
	/// </summary>
	public void Show()
	{
		ShowPopUp = true;
		StateHasChanged();
	}

	protected override void OnParametersSet()
	{
		if (_inputs.Count != InputLabels.Count)
		{
			_inputs.AddRange(Enumerable.Repeat(string.Empty, InputLabels.Count).ToList());
		}
	}
}
